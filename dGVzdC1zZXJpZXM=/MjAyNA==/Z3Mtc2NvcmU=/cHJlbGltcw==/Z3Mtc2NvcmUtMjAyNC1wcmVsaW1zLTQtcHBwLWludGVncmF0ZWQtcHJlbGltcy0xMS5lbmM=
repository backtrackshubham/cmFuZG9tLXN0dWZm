{
  "testId" : "gs-score-2024-prelims-4-ppp-integrated-prelims-11",
  "testType" : "all",
  "fullFilePath" : "upsc-test-series/test-series/2024/gs-score/prelims/gs-score-2024-prelims-4-ppp-integrated-prelims-11.pdf",
  "question" : [
    {
      "index" : 1,
      "question" : "In the writer's opinion, the energy crisis ",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8MQ==",
      "description" : "",
      "correctOption" : "NA==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " is an outcome of unregulated supply of oil  to industries ",
        "option2" : " will subside as soon as the Arab oil begins  to fl ow again ",
        "option3" : " is very likely to lead to the world war ",
        "option4" : " will remain with us for an almost  indefi nite period of time."
      }
    },
    {
      "index" : 2,
      "question" : "The type of writing in the given passage could be called",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8Mg==",
      "description" : "",
      "correctOption" : "NA==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " offi cial ",
        "option2" : " scientifi c ",
        "option3" : " popular ",
        "option4" : " political  Passage-2 All who have gone before you have submitted to the  stroke of death. All who come after you shall undergo  the same fate. The great and the good, The prince  and the peasant, the renowned and the obscure  travel alike the road which leads to the grave. At the  moment when you expire, thousands throughout the  world shall with you, be yielding up their breath. Can  that be held to be a great calamity which is common  to you with everything that lives on the earth which  is an event as much according to the course of the  nature, as it is that leaves shall fall in autumn or  that fruits should drop from the tree when it is fully  ripe. "
      }
    },
    {
      "index" : 3,
      "question" : "The author compares death with the fall of the ripe fruit from a tree to show that death ",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8Mw==",
      "description" : "",
      "correctOption" : "NA==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " occurs in nature also ",
        "option2" : " is a kind of fall from a great height ",
        "option3" : " gives freedom from the ordeals of life ",
        "option4" : " occurs with the achievement of fullness "
      }
    },
    {
      "index" : 4,
      "question" : "Death is a natural phenomenon because  (a) the moment you die, thousands of people all over the world die with you. (b) it is as natural as the fall of leaves of fruits from the trees (c) may people have died in the past (d) the great and the good, the price and the peasant, the renowned and the obscure, all die.Passage-3According to McNeill, a Brahmin priest was expected to be able to recite at least one of the Vedas. The practice was essential for several centuries when the Vedas had not yet been written down. It must have had a selective effect, since priests would have been recruited from those able or willing to memorize long passages. It must have helped in the dissemination of the work, since a memorized passage can be duplicated many times.5. Which of the following can be inferred from the above passage?",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8NA==",
      "description" : "",
      "correctOption" : "Mg==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " Reciting the Vedas was a Brahmin's  obligation.",
        "option2" : " The Vedic priest was like a recorded audio  cassette.",
        "option3" : " McNeill studied the behaviour of Brahmin  priests.",
        "option4" : " Vedic hymns had not been scripted.  Passage-4 Developed countries have made adequate provisions  for social security for senior citizens. State insurers  (as well as private ones) offer medicare and pension  benefi ts to people who can no longer earn. In India,  with the lapse of the joint family system, the  traditional shelter of the elderly has disappeared.  And the state faced with a fi nancial crunch is not in a  position to provide social security. So, it is advisable  that the working population should give serious  thought to building a fi nancial base for itself."
      }
    },
    {
      "index" : 6,
      "question" : "Which one of the following, if it were to happen, weakens the conclusions drawn in the above passage the most?",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8Ng==",
      "description" : "IEV4cGxhbmF0aW9uOiAoYykgaXMgdGhlIGNvcnJlY3QgYW5zd2VyIGNob2ljZS4gVGhlICBhcnJhbmdlbWVudCBlbWVyZ2VzIHNvbWV3aGF0IGxpa2UgdGhpczotICBQcmVtaXNlIC0gSTogSWYgZGV2ZWxvcGVkIGNvdW50cnksIHRoZW4gc29jaWFsICBzZWN1cml0eSBmb3IgdGhlIGVsZGVybHkuIFByZW1pc2UgLSBJSTogTm8gc29jaWFsICBzZWN1cml0eSBmb3IgdGhlIGVsZGVybHkgaW4gSW5kaWEsIGFzIGl0IGlzIG5vdCAgYSBkZXZlbG9wZWQgY291bnRyeSBhbmQgYWxzbyB0aGUgdHJhZGl0aW9uYWwgIHN1cHBvcnQgLSAnam9pbnQgZmFtaWx5IHN5c3RlbScgLSBmb3IgdGhlbSBpcyAgdmFuaXNoaW5nLiBDb25jbHVzaW9uOiBUaGVyZWZvcmUsIHdvcmtpbmcgIHBlb3BsZSBpbiBJbmRpYSBtdXN0IHNhdmUgZm9yIHRoZWlyIG9sZCBhZ2UuIChjKSBhbm5vdW5jZXMgdGhlIGdvb2QgbmV3cyBmb3IgSW5kaWFuIHdvcmtpbmcgIHBlb3BsZTogJ0luZGlhIHdpbGwgYmVjb21lIGEgZGV2ZWxvcGVkIGNvdW50cnkgIGluIHRoZSBmdXR1cmUsJyBpbXBseWluZyBzb2NpYWwgc2VjdXJpdHkgZm9yIHRoZSAgZWxkZXJseSwgdGhlcmVieSB3ZWFrZW5pbmcgdGhlIGNvbmNsdXNpb24uICAoYSkgYW5kIChiKSBpbmRpY2F0ZSBzb21lIGVuY291cmFnaW5nIGZ1dHVyZSAgdHJlbmRzLCBidXQgZG8gbm90IG9idmlhdGUgdGhlIG5lY2Vzc2l0eSBmb3IgIEluZGlhbiB3b3JraW5nIHBlb3BsZSB0byBzYXZlIGZvciB0aGVpciBvbGQgIGFnZS4gKGQpIFN0cmVuZ3RoZW5zIHRoZSBjb25jbHVzaW9uLCByYXRoZXIgdGhhbiAgd2Vha2VuaW5nIGl0Lg==",
      "correctOption" : "Mw==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " The investible income of the working  population, as a proportion of its total  income, will grow in the future.",
        "option2" : " The insurance sector is underdeveloped  and trends indicate that it will be  extensively privatized in the future.",
        "option3" : " India is on a path of development that will  take it to a developed country status, with  all its positive and negative implications.",
        "option4" : " If the working population builds a stronger  fi nancial base, there will be a revival of  the joint family system. Passage-5 Various studies have shown that our forested and  hilly regions and, in general, areas where biodiversity  - as refl ected in the variety of fl ora - is high, are  the places where poverty appears to be high. And  these same areas are also the ones where educational  performance seems to be poor. Therefore, it may be  surmised that, even disregarding poverty status,  richness in biodiversity goes hand in hand with  educational backwardness. CO RE 3 "
      }
    },
    {
      "index" : 7,
      "question" : "Which one of the following statements, if true, can be said to best provide supporting evidence for the surmise mentioned in the passage?",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8Nw==",
      "description" : "IEV4cGxhbmF0aW9uOiAoYykgaXMgdGhlIGNvcnJlY3QgYW5zd2VyIGNob2ljZS4gVGhlIHN1cm1pc2UgIG9yIGh5cG90aGVzaXMgaW4gdGhlIHBhc3NhZ2UgaW1wbGllcyB0aGF0OiAgYmlvZGl2ZXJzaXR5IGlzIGludmVyc2VseSBwcm9wb3J0aW9uYWwgdG8gIGVkdWNhdGlvbmFsIHBlcmZvcm1hbmNlLCB3aXRoIHBvdmVydHkgcGxheWluZyAgbm8gcm9sZSBpbiB0aGlzIHJlbGF0aW9uc2hpcC4gKGQpIG1lcmVseSBjb25maSBybXMgdGhlIGludmVyc2UgcmVsYXRpb25zaGlwLCBhdCAgYWxsIGxldmVscyBvZiBwb3ZlcnR5LiAoYSkgcmVsYXRlcyBnb29kIGVkdWNhdGlvbiBwZXJmb3JtYW5jZSB3aXRoICBoaWdoIGxldmVscyBvZiBwb3ZlcnR5LCByZWdhcmRsZXNzIG9mIGJpb2RpdmVyc2l0eSAgKHZhcmlldHkgb2YgZmwgb3JhKS4gSXQgaXMsIHRoZXJlZm9yZSwgaXJyZWxldmFudC4gKGIpIGFuZCAoYykgYWxzbyBzdXBwb3J0IHRoZSBpbnZlcnNlIHJlbGF0aW9uc2hpcCAgYmV0d2VlbiBiaW9kaXZlcnNpdHkgYW5kIGVkdWNhdGlvbmFsICBwZXJmb3JtYW5jZSwgYnV0IGVhY2ggcmVzZXJ2ZXMgYSByb2xlIGZvciAgcG92ZXJ0eSBpbiB0aGlzIHJlbGF0aW9uc2hpcC4gKGMpIHN1bW1hcml6ZXMgYmV0dGVyLCBoZW5jZSAoYyku",
      "correctOption" : "Mw==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " In regions where there is little variety in  fl ora, educational performance is seen to  be as good as in regions with high variety  in fl ora, where poverty levels are high.",
        "option2" : " Regions which show high biodiversity  also exhibit poor education performance,  at low levels of poverty.",
        "option3" : " Regions which show high biodiversity  reveal high levels of poverty and poor  educational performance.",
        "option4" : " In regions where there is low biodiversity,  at all levels of poverty, educational  performance is seen to be good. Passage-6 The child Artist Deepak Mouthattil still builds castles  in the sand. In addition, he also makes portraits and  abstract expressions in sand. For the last two years,  on Gandhi Jayanti on October 2, Deepak has been  paying homage to the Father of the Nation by making  Gandhi's sculpture in sand on Shanghumughom  beach. In 2011, it covered an area of about 100 feet.  Forty of them worked on it from 6 a.m. to 4 p.m.  Some of them were his friends from Kannur, his  home town, who are working in the city. The end  result was pleasing. In 2012 too, he created another  work in sand to pay his respects to Gandhi, but on a  smaller scale. As usual, in addition to his small team  of friends and well-wishers, passersby and visitors to  the beach joined in when they saw him working. 'Who  does not like to play in the sand?' asks Deepak, all  smiles. According to his instructions, they heaped the  sand in certain places, made mounds of it in certain  other places and fl attened it elsewhere. At the end of  three hours, they were able to sculpt an image of the  Mahatma. His creative endeavor on Gandhi Jayanti  has been supported by various organizations with the  result that Deepak had painted 22 works showing  different incidents from Gandhi's life, all in water  colour. The works were put on in an exhibition that  was sponsored by the Public Relations Department  of the Government of Kerala."
      }
    },
    {
      "index" : 8,
      "question" : "What instructions, do you think, were given by Deepak to his team?",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8OA==",
      "description" : "IEV4cGxhbmF0aW9uOiBDaG9pY2UgKGEpLCAoYikgYW5kIChjKSBnaXZlIHBhcnRpYWwgcmVhc29ucyBhbmQgIGFuc3dlcnMuIEEgY29tcGxldGUgYW5zd2VyIGNhbiBiZSBmb3VuZCBpbiAgY2hvaWNlIChkKSB3aGljaCBsaXN0cyBhbGwgdGhlIGFjdGlvbnMgcGVyZm9ybWVkICBieSB0aGUgdGVhbSB0byBwcm9kdWNlIHRoZSBwaWN0dXJlIHRvIHBheSAgaG9tYWdlIHRvIEdhbmRoaWppLg==",
      "correctOption" : "NA==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " To collect sand and sculpt the portrait. ",
        "option2" : " To mix water colours and mix sand with  water.",
        "option3" : " Level the sand, heap it up and mould it. ",
        "option4" : " To heap the sand, make mounds, fl atten  it and sculpt the image."
      }
    },
    {
      "index" : 9,
      "question" : "Why did various organizations help Deepak? ",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8OQ==",
      "description" : "IEV4cGxhbmF0aW9uOiBObyBkb3VidCBEZWVwYWsgd2FzIGEgY2hpbGQgYXJ0aXN0IGJ1dCB0aGF0IGlzICBub3QgdGhlIG9ubHkgcmVhc29uIGZvciBvdGhlcnMgdG8gaGVscCBoaW0uIFNvICBjaG9pY2UgKGEpIGlzIGVsaW1pbmF0ZWQsIEFuc3dlciAoYykgc2F5cyB3YXRlciAgY29sb3VyIHdhcyB1c2VkIGFuZCB0aGF0IGRvZXNuJ3Qgc291bmQgYSAgc3Ryb25nIHJlYXNvbi4gQ2hvaWNlIChkKSBzYXlzIGhpcyB3b3JrcyB3ZXJlICBzcG9uc29yZWQgYnkgdGhlIEdvdmVybm1lbnQgb2YgS2VyYWxhLiBCb3RoICB0aGUgYW5zd2VycyBhcmUgaW5jb21wbGV0ZS4gVGhlcmUgaXMgYSBiZXR0ZXIgIHJlYXNvbiBhbmQgdGhhdCBpcyBmb3VuZCBpbiBjaG9pY2UgKGIpLiBIZW5jZSAgKGIpIGlzIHRoZSByaWdodCBhbnN3ZXIu",
      "correctOption" : "Mg==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " Because Deepak was a child artist. ",
        "option2" : " Because his creativity was so rare, it  embraced 22 different facets of Gandhiji's  life.",
        "option3" : " Because all the paintings were in water  colour.",
        "option4" : " Because these works were sponsored by  the Government of Kerala. "
      }
    },
    {
      "index" : 10,
      "question" : "How many different types of people helped Deepak with his portraits?",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8MTA=",
      "description" : "IEV4cGxhbmF0aW9uOiBEZWVwYWsgY291bGRuJ3QgaGF2ZSB3b3JrZWQgc2luZ2xlaGFuZGVkbHk7ICBoZSBkaWQgdGFrZSBzdXBwb3J0IG9mIHNvbWUgcGVvcGxlLiBTbyBjaG9pY2UgIChhKSBpcyBvdXQuIENob2ljZSAoYykgYW5kIChkKSBzYXkgd2hvIGhlbHBlZCAgaGltIGJ1dCB0aGV5IGFyZSBub3QgdGhlIG9ubHkgb25lcyB3aG8gaGVscGVkICBoaW0uIFRoZXJlIGFyZSBzb21lIG1vcmUgd2hvIGhlbHBlZCBoaW0uICBDaG9pY2UgKGIpIHNheXMgZm91ciBkaWZmZXJlbnQgdHlwZXMgb2YgcGVvcGxlICBoZWxwZWQgaGltLiAoZnJpZW5kcywgd2VsbC13aXNoZXJzLCBwYXNzZXJzYnkgIGFuZCB2aXNpdG9ycykuIFRoZXJlZm9yZSwgY2hvaWNlIChiKSBpcyByaWdodCBhbmQgIGNvbXBsZXRlLiAz",
      "correctOption" : "Mg==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " Single-handed ",
        "option2" : " Four different types of people ",
        "option3" : " Deepak and his relatives ",
        "option4" : " People from Kannur and visitors "
      }
    },
    {
      "index" : 11,
      "question" : "How did Deepak succeed in paying homage to Gandhiji?",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8MTE=",
      "description" : "IEV4cGxhbmF0aW9uOiBDaG9pY2UgKGEpIHNheXMgaGUgd29ya2VkIGZyb20gZGF3biB0byAgZHVzaywgd2hlcmVhcyBoZSB3b3JrZWQgZnJvbSBtb3JuaW5nICB0aWxsIGV2ZW5pbmcgNC4gU28sIHRoaXMgY2hvaWNlIGlzIHdyb25nLiAgQ2hvaWNlIChiKSBzYXlzIGhlIGdvdCB0aGUgY29vcGVyYXRpb24gb2YgIGZvcnR5IHBlb3BsZS4gTm8gZG91YnQgdGhleSBzdXBwb3J0ZWQgIGhpbS4gQnV0IHRoaXMgY2hvaWNlIGRvZXNuJ3Qgc2F5IGluIHdoYXQgIGNvbmNyZXRlIGZvcm0gdGhleSBnYXZlIHRoZSBzdXBwb3J0LiAgSGVuY2UgY2hvaWNlIChiKSBpcyBub3QgYWNjZXB0YWJsZS4gQ2hvaWNlICAoZCkgc2F5cyBEZWVwYWsgcHJvZHVjZWQgYSBwbGVhc2luZyBlbmQtIHJlc3VsdCwgYnV0IHRoZXJlIGlzIG5vIG1lbnRpb24gd2hhdCB0aGF0ICBlbmQgcmVzdWx0IGlzLiBIb3dldmVyLCBvcHRpb24gKGMpIGhpdHMgdGhlICBidWxsJ3MgZXllOiBEZWVwYWsgYW5kIGhpcyB0ZWFtIHNjdWxwdGVkICBhIDEwMC1mb290IGltYWdlIG9mIEdhbmRoaSB0byBwYXkgaG9tYWdlICB0byBoaW0uIFRodXMsIHRoZSByaWdodCBhbnN3ZXIgaXMgY2hvaWNlICAoYyku",
      "correctOption" : "Mw==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " By working on the beach from dawn to  dusk.",
        "option2" : " By enlisting the willing cooperation of  forty people.",
        "option3" : " By sculpting a 100-foot picture of Gandhiji  on the beach.",
        "option4" : " By producing a pleasing end result.  Direction (Q.12-20): Read the following three  passages carefully and answer the questions  given below.  Passage-7 We often worship in temples without knowing much  about the signifi cance of each of them. But it is  important to acquaint ourselves with the mythology  behind a temple, its signifi cance and stories that  relate to it. That would make our worship more  meaningful. Often even the names of the temple  towns have a story behind them. For example, there  are stories about why Naimisaranya got its name.  Nemi in Sanskrit means a circle. It is said that when  celestial beings asked Brahma where they should  do penance, Brahma fl ung his ring, and told them  that they should do penance in the place where the  ring fell. It acquired its name from Brahma's ring.  Another story says that after Lord Narayana used  his discus (Sudarsana) to slay demons. He told  Sudarsana to clean himself up in the place now called  Naimasayanya. Because the discus bathed there, it  came to be called Naimiasaranya. In some temples,  the Lord appeared of his own accord. Then there  are other temples where the image was installed  by sages, celestial beings or human beings. Seven  places are said to be very holy - Ayodhya, Kashi,  Mathura, Puri, Kanchi, Avantika and Dwaraka. It  is important to visit these place. Mathura is the place  where Ambarisha did penance, It was at Mathura  that the young boy Dhruva did penance. It used to  be originally Known as Madhu vanam. It was here  that Krishna was born. In Kanchipuram, there is a  temple where the deity is known as Deepa Prakasa.  Vedanta Desika composed a Sanskrit work in praise  of this deity. In one of the verses, he points out that  Narayana is worshiped in temples according to  4  CO RE  Pancharatra was taught by the Lord Himself. As for  the Vaikhanasa agama, it was taught by the saga  Vikhanasa. Althought the celestial worshiped the  Lord on many occasions, their worship was invariably  for a purpose. They wanted to get back lost power, or  they sought protection of their status but when we  worship God, we must not seek such trivial things  from him. We should be motivated by love for him."
      }
    },
    {
      "index" : 13,
      "question" : "According to the passage, Mathura is famous because1. it is the holy place where Krishna was born.2. Ambarisha and Dhruva did penance there.3. it was originally called Madhu Nagar. 4. many devotees go there. 1 and 3 (a) only1 and 4 (b) only2 and 3 (c) only1 and 2 (d) only14. ''It is important to visit these places'. Why? 1. They are holy. 2. The Lord manifests and images are placed by sages and heavenly/earthly beings.3. Only seven sites are holy. 4. It excludes Tirupathi. 1 and 4 (a) only2 and 3 (b) only1 and 2 (c) only2 and 4 (d) only15. Naimisaranya derived its name from ",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8MTM=",
      "description" : "IEV4cGxhbmF0aW9uOiBBbWJhcmlzaGEgYW5kIERocnV2YSBkaWQgcGVuYW5jZSB0aGVyZSBhbmQgIGl0IHdhcyB0aGUgcGxhY2Ugd2hlcmUgTG9yZCBLcmlzaG5hIHdhcyBib3JuLiAgT3RoZXIgdHdvIHJlYXNvbnMgYXJlIGlycmVsZXZhbnQuIEFuc3dlcnMgKGEpLCAgKGIpIGFuZCAoYykgYXJlIHdyb25nIGFuZCBvbmx5IGFuc3dlciAoZCkgaXMgIHJpZ2h0Lg==",
      "correctOption" : "NA==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " Brahma's ring and Lord Narayan's  discus.",
        "option2" : " where Brahma's discus fell. ",
        "option3" : " where Lord Narayan's ring landed. ",
        "option4" : " the name of the weapon used to strangle  the demons."
      }
    },
    {
      "index" : 16,
      "question" : "What should we do to make our worship in temples more meaningful?",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8MTY=",
      "description" : "IEV4cGxhbmF0aW9uOiBDaG9pY2UgKGEpIHNvdW5kcyByZWFzb25hYmxlIGVub3VnaCBidXQgbm90ICBhcyB0aGUgcmlnaHQgYW5zd2VyLiBDaG9pY2UgKGIpIG1hbnkgbm90IGJlICBhY2NlcHRhYmxlIGJlY2F1c2UgdGhhdCByZWFzb24gZG9lc24ndCBzZXJ2ZSAgdGhlIHB1cnBvc2UuIENob2ljZSAoYykgc2F5cyBvbmUgc2hvdWxkIGJlICBhd2FyZSBvZiB0aGUgbXl0aG9sb2dpY2FsIGFudGVjZWRlbnRzIGFuZCAgc3RvcmllcyBhYm91dCB0aGUgb3JpZ2lucyBvZiB0aGUgdGVtcGxlcy4gQnV0ICBsaXN0ZW5pbmcgdG8gYSBkaXNjb3Vyc2UgaXMgb25seSBoYWxmIHRoZSBzdG9yeS4gIFNvLCBjaG9pY2UgKGQpIGlzIHJ1bGVkIG91dCBhbmQgY2hvaWNlIChjKSBpcyB0aGUgIHJpZ2h0IGFuc3dlci4=",
      "correctOption" : "Mw==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " We should worship more often than we do  now.",
        "option2" : " We should study the mythology of all  temples.",
        "option3" : " We become aware of the mythological and  anecdotal stories of temple origins.",
        "option4" : " We should listen to religious discourses  reverentially. Passage-8 As in common knowledge, while the male lion's  mane incites our imagination, it is actually the  lionesses that bring in food and ensure the survival  of the species. As Renana Jhavwala of SEWA and  a member of UN Secretary General's High-Level  Panel on Women's Economic Empowerment aptly  says, 'Women's work is invisible ... women are at the  base of the economic pyramid. Women are stuck on a  'sticky fl oor' of low technology, low productivity, low  skills, low earnings, and low dignity.' Rural women  in the Asia-Pacifi c region make critical contributions  to household production and national food security,  yet their contribution is hardly acknowledged.  There is strong empirical evidence to suggest  that money in the hands of the mother increases  expenditure on children. There is a strong positive  correlation between women's status and economic/ social development. Policymakers across the world  have placed great emphasis on gender equality. The  experience suggests that economic development  alone is not enough to bring about equality. What is  needed is policy action. This is where the importance  of women's political empowerment comes. Democracy  in the 21st century is moving towards equity and  inclusion. This is the underlying message of citizens'  movements across the world. And with the increasing  role of women at the policy level and in institutions  of government, democracy can become 'politics of  difference' and 'politics of presence.'"
      }
    },
    {
      "index" : 17,
      "question" : "'Democracy in the 21st century is moving towards equity and inclusion.' implies that",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8MTc=",
      "description" : "",
      "correctOption" : "Mw==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " Every citizen has the right to participate  actively in democracy in the 21st  century.",
        "option2" : " Women had no role in politics before the  21st century.",
        "option3" : " Democracy in the 21st century is  accepting both men and women equally  in mainstream politics. ",
        "option4" : " None of the above  CO RE 5 "
      }
    },
    {
      "index" : 18,
      "question" : "Which of the following is contrary to the facts mentioned in the passage about women in the Asia-Pacifi c region?",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8MTg=",
      "description" : "",
      "correctOption" : "MQ==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " Their contribution is greatly  acknowledged. ",
        "option2" : " They make a lot of contributions to  household production and national food  security.",
        "option3" : " They are engaged mostly in household  work, which is a piece of low-skill work.",
        "option4" : " None of the above  Passage-9 During the reign of king Veer, there lived a wise  magistrate. Haripant's verdicts were always just and  people from all over the vast kingdom came to him  in order to settle their disputes. In the city where  Haripant lived, there was a greedy ghee merchant  named Niranjan. He always kept twenty barrels of  ghee. Of these, fi fteen would contain good quality  ghee and the remaining could be adulterated. He  would mix the two and sell them. This went on for  a long time, till fi nally the people fed up with being  cheated, complained to Haripant. Haripant had the ghee examined and found to  it be adulterated. He gave Niranjan a choice of  punishment-drink the fi ve barrels of adulterated  ghee from his shop, or receive a hundred lashings, or  pay a thousand gold coins to the treasury. Niranjan  thought for a while. Losing a thousand gold coins  was too much and a hundred lashings too painful. So,  he decided to drink the fi ve barrels of ghee. Though  Niranjan sold adulterated goods in his shop, he made  sure his own food was of the best quality. So, after  drinking one barrel of ghee, he began to feel sick. By  the second barrel, he was vomiting. At this point, he  decided to opt for the lashings instead. But he was  pampered and his body was unused to any harsh  treatment. After ten lashes, he started trembling  and by twenty he was giddy. 'Stop!' he screamed.  'I will pay the thousand gold coins!' And he handed  them over."
      }
    },
    {
      "index" : 19,
      "question" : "Why was Sean reluctant to take Luke along? ",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8MTk=",
      "description" : "",
      "correctOption" : "Mg==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " Because he was a selfi sh man ",
        "option2" : " He feared that Luke's reaction may alert  the Emperor's men",
        "option3" : " Because Luke could harm him ",
        "option4" : " He wanted to bring fruits for Luke  himself"
      }
    },
    {
      "index" : 20,
      "question" : "Which of the following can be inferred from the passage?",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8MjA=",
      "description" : "",
      "correctOption" : "Mg==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " Luke did not take good care of his uncle ",
        "option2" : " Lake of self-control had put Luke into  trouble",
        "option3" : " The Emperor was a wicked man ",
        "option4" : " Luke had a habit of speaking loudly  Directions (Q. 21-29): Read the following four  passages and answer the items that follow. Passage-10 The Sun, while going on his daily rounds saw a  princess and fell in love with her. Whenever he could  slip away from the heavens, he would take human  form and go down to the princess to spend some time  with her. The princess too became quite fond of him  and would wait for him to come. One day the Sun  decided to send her a blood-red ruby as a token of  his love for her. He put the gem in a silk bag, and  calling a crow that was fl ying past, asked the bird  to deliver the gem to his beloved. Crows had milky  white feathers in those days and it was considered  auspicious if a crow came anywhere near you. So the  Sun was pleased that he had found a crow to deliver  the gem. As the crow sped through the sky with the  silken bag, the aroma of food lured him. Looking  down, the crow saw that a wedding feast was in  progress, and immediately it was distracted from its  mission. Food was one thing it could never resist."
      }
    },
    {
      "index" : 21,
      "question" : "What did the Sun send for the princess as a token of his love?",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8MjE=",
      "description" : "",
      "correctOption" : "Mw==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " He sent her the crow ",
        "option2" : " He sent her dry cow dung ",
        "option3" : " He sent her a red ruby ",
        "option4" : " He gifted her the city of Myanmar  Passage-11 Our voyage was very prosperous, but I shall not  trouble the reader with a journal of it. The captain  called in at one or two ports and sent in his longboat  for provisions and fresh water, but I never went out  of the ship till we came into the Downs, which was  on the 3rd day of June 1706, about nine months after  my escape. I offered to leave my goods in security for  payment of my freight, but the captain protested he  would not receive one farthing. We took kind leave of  each other, and I made him promise that he would  come to see me at my house in Redriff. I hired a  house and a guide for fi ve shillings which I borrowed  from the captain."
      }
    },
    {
      "index" : 22,
      "question" : "When the writer uses the word 'prosperous' to describe the voyage, he means that",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8MjI=",
      "description" : "",
      "correctOption" : "Mw==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " it made him rich ",
        "option2" : " it made him healthy ",
        "option3" : " it was very pleasant ",
        "option4" : " it was uneventful "
      }
    },
    {
      "index" : 23,
      "question" : "From the passage, it is clear that the captain's attitude to the author was",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8MjM=",
      "description" : "",
      "correctOption" : "Mw==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " one of hostility ",
        "option2" : " one of indifference ",
        "option3" : " one of extreme friendliness and kindness ",
        "option4" : " one of disgust and irritation  6  CO RE  Passage-12 The New Year is a time for resolutions. Mentally at  least, most of us could compile formidable lists of do's  and don'ts. The same old favorites recur year in and  year out with monotonous regularity. Past experience  has taught us that certain accomplishments are  beyond attainment. If we remain inveterate smokers, it is only because  we have so often experienced the frustration that  results from failure. Most of us fail in our efforts  at self-improvement because our schemes are too  ambitious and we never have time to carry them  out. We also make the fundamental error of announcing  our resolutions to everybody so that we look even  more foolish when we slip back into our old bad  ways."
      }
    },
    {
      "index" : 24,
      "question" : "The phrase 'formidable lists of do's and don'ts means that",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8MjQ=",
      "description" : "",
      "correctOption" : "Mg==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " the bad points of our character are  formidable",
        "option2" : " the list is so long that it is frightening ",
        "option3" : " the things that need to be included is  frightening",
        "option4" : " the realisation that we are so imperfect is  frightening Passage-13 Indian culture respects its elders, and abuse of the  elderly is a western thing. We've forever heard the  line. Only problem: It's a terrible myth. A recent study  in twenty cities across India revealed that at least  31% of elders face abuse and 24% are abused almost  daily. And in a society where parents often crave male  babies, the study found that sons were responsible  for as much as 59% of the abuse. Daughters-in law  accounted of nearly 23% of the incidents of Abuse.  Elderly women are more abused than men. In the  most abusive situations, the senior citizens remain  silent about every form of abuse because they often  don't know where to complain in the absence of legal  provisions. An earlier report by HelpAge and the  World Health Organisation, based on discussions  with elderly persons and health workers who interact  with senior citizens in New Delhi, described the  kinds of abuse the elderly are usually subjected to.  The abuse is not always physical. Among the various  kinds of abuse, rampant are showing them extreme  neglect, not feeding parents well, or making them wait  endlessly for meals, showing differential treatment,  verbal abuse and economic abuse. In many of these  cases, property and other assets are grabbed from  them. It's frightening! India has about eighty million  senior citizens, a fi gure that will double in twenty  years. The need of the hour is moral education, right  from the school level, that caring for the elderly is  non-negotiable. "
      }
    },
    {
      "index" : 26,
      "question" : "What does the writer mean by 'caring for the elderly is non-negotiable'?",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8MjY=",
      "description" : "IEV4cGxhbmF0aW9uOiAnTm9uLW5lZ290aWFibGUnIG1lYW5zIHNvbWV0aGluZyB0aGF0IGlzIG5vdCAgb3BlbiB0byBkaXNjdXNzaW9uIG9yIGFyYml0cmF0aW9uLiBJbiBvdGhlciB3b3JkcyAgaXQgaXMgYSBtb3JhbCBvYmxpZ2F0aW9uLiBDaG9pY2UgKGEpIGlzIGluY29ycmVjdCAgYXMgcGFyZW50cyBhcmUgdHJlYXRlZCBhcyBjb21tb2RpdGllcy4gQ2hvaWNlICAoYikgaXMgYSBkaXN0b3J0aW9uIG9mIHRoZSB0ZXJtICdub24tbmVnb3RpYWJsZScuICBDaG9pY2UgKGMpIHJpZ2h0bHkgaW50ZXJwcmV0cyB0aGUgdGVybSBpbiB0aGUgIGNvbnRleHQgb2YgdGFraW5nIGNhcmUgb2YgdGhlIGVsZGVybHku",
      "correctOption" : "Mw==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " Parents can be bought, sold, exchanged or  transferred.",
        "option2" : " Caring for parents is not something that  can be fi rmly established and laws framed  thereby.",
        "option3" : " Caring for parents is not a choice, it is  an obligation and cannot be settled by  arbitration or concession.",
        "option4" : " Caring for parents should be made part of  school curriculum."
      }
    },
    {
      "index" : 28,
      "question" : "What is the indication of the various surveys? ",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8Mjg=",
      "description" : "IEV4cGxhbmF0aW9uOiBDaG9pY2UgKGEpLCAoYikgYW5kIChjKSBhcmUgIGRpc3RvcnRpb25zIG9mIHN1cnZleSByZWFkaW5ncy4gQ2hvaWNlIChkKSB0aGF0ICBzb25zIGFyZSBtYWluIHBlcnBldHJhdG9ycyBvZiBhYnVzZSBhZ2FpbnN0ICBwYXJlbnRzIGlzIHRydWUu",
      "correctOption" : "NA==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " Daughters-in-law are the main  perpetrators of crime against the elderly.",
        "option2" : " Twenty three percent of the elderly face  abuse on a daily basis.",
        "option3" : " Sons are as criminal-minded as daughters-  in-law, when it comes to abuse of elders.",
        "option4" : " Sons are the main perpetrators of abuse  against the elderly. CO RE 7 "
      }
    },
    {
      "index" : 29,
      "question" : "What is a 'terrible myth', according to the writer?",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8Mjk=",
      "description" : "IEV4cGxhbmF0aW9uOiBUaGUgJ215dGgnIGlzIHRoYXQgZWxkZXJseSBhYnVzZSBkb2Vzbid0ICBoYXBwZW4gaW4gSW5kaWEsIGFzIHN0YXRlZCBpbiAoYSkuIENob2ljZSAoYikgaXMgIChkKSBvdXQgb2Ygc2NvcGUgb2YgdGhlIHBhc3NhZ2UuIENob2ljZXMgKGMpIGFuZCAgcHJlc2VudCBhIGNvbnRyYXN0IGJldHdlZW4gdGhlIFdlc3QgYW5kIEluZGlhLCAgYW5kIHRoZSBwYXNzYWdlIGRvZXMgbm90IHByZXNlbnQgYSBjb250cmFzdCBhdCAgYWxsLiBJdCBtZXJlbHkgc3RhdGVzIHRoYXQgcGVvcGxlIGluIEluZGlhIHN1ZmZlciAgZnJvbSB0aGUgbWlzY29uY2VwdGlvbiB0aGF0IGVsZGVybHkgYWJ1c2UgaXMgIHdlc3Rlcm4tY2VudHJpYy4=",
      "correctOption" : "MQ==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " That abuse of the elderly is a western  thing.",
        "option2" : " That Indian culture upholds the joint  family system so abuse of the elderly is  minimal.",
        "option3" : " That elderly abuse is more prevalent in  India than in the West.",
        "option4" : " That elderly abuse is more prevalent in  the West than in India. Directions (Q. 30-36): Read the following three  passages and answer the items that follow. Passage-14 My duties in the zoo included feeding the lions. The  popular belief is that lions have the sweetness of  character, sagacity, and courage. But my experience  with them shattered this myth. Albert, the male,  often used to surprise me by suddenly jumping out  against the bars with a hair-raising cough of wrath.  When I leaped in the air like a startled stag. I am  sure he enjoyed his hastily snatching the biggest  joint of meat, he would pinch the meat belongs to the  lioness and the cubs. "
      }
    },
    {
      "index" : 30,
      "question" : "The traditional image of a lion according to the passage is that ",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8MzA=",
      "description" : "",
      "correctOption" : "Mw==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " he is intelligent, kind, and handsome ",
        "option2" : " he is foolish, short-tempered, and  dangerous",
        "option3" : " he is wise, gentle, and brave ",
        "option4" : " he is noisy, hungry, and wrathful "
      }
    },
    {
      "index" : 31,
      "question" : "The lion in this passage is described as if ",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8MzE=",
      "description" : "",
      "correctOption" : "Mw==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " he was an unusually cruel beast ",
        "option2" : " he had a personality like a human ",
        "option3" : " he was a beast with a sense of wrath ",
        "option4" : " he had a mind like a monster  Passage-15 Spring is the season of renewal when new green can  be seen on the trees and the lawn of parks Spring  fl owers have blossomed in a riot of scent and a  rainbow of colours. Houses shake out their dust and  housewives go about in a fl urry of activity. Woolens  begin to disappear; the light cotton begins to come  back. Lazy lizards came out of their winter sleep and  go back to their job of fl y-hunting. "
      }
    },
    {
      "index" : 32,
      "question" : "The spring season is usually a ",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8MzI=",
      "description" : "",
      "correctOption" : "Mg==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " time for regeneration ",
        "option2" : " time to plant saplings ",
        "option3" : " period of plenty ",
        "option4" : " festive time  Passage-16 If you realize your innate power, you don't need a  seat or position to serve the people. You can do better  without a formal post, as did Mahatma Gandhi.  Often a ruler is not a reformer and a reformer doesn't  rule! The main motivating factor for people is their  emotions, especially when illiteracy is high. This is  used and misused by political parties and religious  leaders for short term gains. The only way to counter  this is broad-based education, both scientifi c and  spiritual. Most political leaders lack education in true service.  Few are above the boundaries of race, religion and  nationality. Like any other profession, we need to  have a system for educating politicians. A certain  level of social education and maturity is needed to  shoulder responsibility. The ministers must be able  to ignore the sycophants around them and learn to  listen to their own knowledge to be right and wrong. We have to get out of the politics of hate and mistrust.  True politics is to care for all people. When service of  the people is the main aim of politics and not power  or pleasure, any country will develop much faster as  everyone will be competing to serve better instead of  for personal gains."
      }
    },
    {
      "index" : 33,
      "question" : "As per the passage, every minister should ",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8MzM=",
      "description" : "IEV4cGxhbmF0aW9uOiBSZWZlciB0byB0aGUgbGFzdCBwYXJhIHdoaWNoIGV4cGxhaW5zIHdoYXQgdHJ1ZSAgcG9saXRpY3MgaXMuIFRoZSBsYXN0IHNlbnRlbmNlIG9mIHBhcmEgMiB0ZWxscyBvbmUgIHdoYXQgYSB0cnVlIHBvbGl0aWNpYW4gc2hvdWxkIGRvLg==",
      "correctOption" : "Mw==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " listen to the voice of the people. ",
        "option2" : " compete to gain more. ",
        "option3" : " be guided by his own conscience. ",
        "option4" : " learn true politics. "
      }
    },
    {
      "index" : 34,
      "question" : "The statement, 'Few are above the boundaries of race, religion and nationality' means",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8MzQ=",
      "description" : "IEV4cGxhbmF0aW9uOiBUaGUgcGFzc2FnZSBjbGVhcmx5IHN1Z2dlc3RzIHRoYXQgb3B0aW9uIChjKSBpcyAgdGhlIHJpZ2h0IGNob2ljZS4=",
      "correctOption" : "Mw==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " very few political leaders care for all  people.",
        "option2" : " political leaders are not infl uenced by  the race, religion and nationality of their  people.",
        "option3" : " most leaders fail to lead their people in  the right path. ",
        "option4" : " hardly does any political leader care for  people irrespective of their caste, religion  and nationality."
      }
    },
    {
      "index" : 35,
      "question" : "As per the passage, Mahatma Gandhi ",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8MzU=",
      "description" : "IEV4cGxhbmF0aW9uOiBSZWZlciB0byB0aGUgZmkgcnN0IHRocmVlIHNlbnRlbmNlcyBvZiBwYXJhIDEgIHdoaWNoIHBvaW50IHRvIG9wdGlvbiAoYyku",
      "correctOption" : "Mw==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " craved for power and position. ",
        "option2" : " would have done better service to people  with a formal post.",
        "option3" : " served the people without a formal post  as he realised his inherent power.",
        "option4" : " said that people didn't need any seat or  position to do service. 8  CO RE "
      }
    },
    {
      "index" : 36,
      "question" : "The most important factor that motivates people is",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8MzY=",
      "description" : "IEV4cGxhbmF0aW9uOiBSZWZlciB0byB0aGUgZm91cnRoIHNlbnRlbmNlIG9mIHBhcmEgb25lLg==",
      "correctOption" : "MQ==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " their emotions. ",
        "option2" : " their spiritual power. ",
        "option3" : " their illiteracy. ",
        "option4" : " their capacity to rule.  Directions (Q. No. 37-41): Read the following four  passages and answer the items that follow. Passage - 17 One crucial consequence of the fact that science is a  social activity. It is the demolition of the legendary  belief that it is an entirely amoral, intellectual  game of problem-solving. On this view, scientists  are desiccated calculating machines, whose work is  determined solely by meter readings and what they  can deduce from them. The truth is very different.  Far from being amoral and coldly logical, science  actually generates values. These include intellectual  humility, an unusually acute regard for honesty,  respect for the revolutionary and the apparent crank,  and stress on the importance of co-operation. These  are not optional extras for the scientist; they arise  directly out of the pursuit of science. The degree  to which a scientist lives by them will be refl ected  in the health of the scientifi c community and in an  individual scientist's long term success in his trade.  Even the most inveterate liar must, if he is to succeed  in science, cultivate a deep respect for the truth when  he is about his work."
      }
    },
    {
      "index" : 37,
      "question" : "The author stoutly refutes the notion that science is an amoral, intellectual game of problem solving by",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8Mzc=",
      "description" : "",
      "correctOption" : "NA==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " pointing out that scientists are calculating  machines whose work is determined by  accurate meter readings.",
        "option2" : " stating that science is a social activity. ",
        "option3" : " showing how the inexorable, self-  correcting movement will purge science  of falsehood",
        "option4" : " listing the traits of a true scientist and  providing that liars can never pursue  science. Passage - 18 Mobile technology is transforming the global  banking and payment industry by providing added  convenience to existing bank customers in developed  markets, and by offering new services to the unbanked  customers in emerging markets. Any new product for  the G2P market needs to consider the incentives and  motivations of all parties involved in the current value  chain. As banks, mobile network operators (MNOs),  NGOs and non-profi t fi rms build new services to  seize the opportunity to reach the large unbanked  population, they must take time to understand the  needs of customers. This opportunity has attracted  several new players ranging from MNOs and start- ups to companies from adjacent industries such as  retail, each trying its own business model to succeed  in this new world. The infl ux of so many players and  services has created confusion for customers, lack of  coordination among players and limited scale for a  single company. History tells us that after the initial  stage of confusion, the dust eventually settles down  and a few winners emerge."
      }
    },
    {
      "index" : 38,
      "question" : "What does the author mean by 'unbanked customer'?",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8Mzg=",
      "description" : "",
      "correctOption" : "MQ==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " Not having access to the services of a  bank.",
        "option2" : " A person who buys goods or services from  a fi nancial institution.",
        "option3" : " A customer of a specifi ed kind with whom  one has to deal.",
        "option4" : " Both 2 and 3 "
      }
    },
    {
      "index" : 39,
      "question" : "Which of the following is most OPPOSITE in meaning of the word given in the passage?INFLUX",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8Mzk=",
      "description" : "",
      "correctOption" : "NA==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " Invasion ",
        "option2" : " Enlargement ",
        "option3" : " Advance ",
        "option4" : " Ebb  Passage - 19 It can be argued that most of the consumer  dissatisfaction with marketing strategies arises  from an inability to aim advertising at only the likely  buyers of a given product. There are three groups of  consumers who are affected by the marketing process.  First, there are the market segment people who need  the commodity in question. Second, there are the  program target people in the market segment with  the 'best fi t' characteristics for a specifi c product.  Lots of people may need trousers, but only a few  qualify as likely buyers of very expensive designer  trousers. Finally, there is the program audience? all  people who are actually exposed to the marketing  program without regard to whether they need or  want the product."
      }
    },
    {
      "index" : 40,
      "question" : "The author mentions 'trousers' most likely in order to",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8NDA=",
      "description" : "",
      "correctOption" : "NA==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " make a comparison between the program  target and the program audience",
        "option2" : " emphasize the similarities between the  market segment and the program target",
        "option3" : " provide an example of the way three  groups of consumers are affected by a  marketing program",
        "option4" : " clarify the distinction between the market  segment and the program target CO RE 9  Passage - 20 In nearly all human populations a majority of  individuals can taste the artifi cially synthesized  chemical phenylthiocarbonide (PTC). However, the  percentage varies dramatically-from as low as  60% in India to as high as 95% in Africa. That this  polymorphism is observed in nonhuman primates  as well indicates a long evolutionary history which,  although obviously not acting on PTC, might refl ect  evolutionary selection for taste discrimination of  other, more signifi cant bitter substances, such as  certain toxic plants."
      }
    },
    {
      "index" : 41,
      "question" : "Which of the following provides the most reasonable explanation for the assertion in the fi rst paragraph that evolutionary history 'obviously' did not act on PTC? ",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8NDE=",
      "description" : "",
      "correctOption" : "MQ==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " PTC is not a naturally occurring chemical  but rather has been produced only  recently by scientists.",
        "option2" : " Most humans lack suffi cient taste  sensitivity to discriminate between PTC  and bitter chemicals occurring naturally. ",
        "option3" : " Variability among humans respecting  PTC discrimination, like variability  respecting earwax, cannot be explained  in terms of evolutionary adaptively.",
        "option4" : " Unlike non-human primates, humans can  discriminate intellectually between toxic  and nontoxic bitter substances. Directions (Q. No. 42-45): Read the following three  passages and answer the items that follow. Passage - 21 Anti-Semitism turns up so often in the works of  20thcentury artists, in fact, that it almost seems part  of the job description, and critics and commentators  have sometimes tried to mitigate if not excuse it.  Wagner, they point out, had Jewish friends. Eliot  was a devout, churchgoing Anglican - surely not a  'bad' person in any extreme way. So for now, let's  leave anti-Semitism off the list. How about misogyny  or generally creepy behaviour toward women?  Picasso probably takes the prize here: of the seven  main women in his life, two went mad and two  killed themselves. His standing could be in jeopardy,  though, if the crime novelist Patricia Cornwell ever  succeeds in proving her conviction - argued at length  and at great expense in her book Portrait of a Killer:  Jack the Ripper-Case Closed - that the British painter  Walter Sickert was in fact the famous serial killer."
      }
    },
    {
      "index" : 42,
      "question" : "What is the tone of the paragraph? ",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8NDI=",
      "description" : "",
      "correctOption" : "Mg==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " Analytical ",
        "option2" : " Argumentative ",
        "option3" : " Cynical ",
        "option4" : " Critical "
      }
    },
    {
      "index" : 43,
      "question" : "What is the main idea of the passage? ",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8NDM=",
      "description" : "",
      "correctOption" : "NA==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " Bad person can make good art. ",
        "option2" : " Creation of great art is possible being in  commonplace. ",
        "option3" : " Challenging the notion: bad people cannot  make good art. ",
        "option4" : " Asserts certain degree of qualities set  great artists apart from the other Passage - 22 A well-dressed young man entered a big textile shop  one evening. He was able to draw the attention of  the salesmen who thought him rich and likely to  make heavy purchases. He was shown the superior  varieties of suit lengths and sarees. But after casually  examining them, he kept moving to the next section,  where readymade goods were being sold and further  on to the hosiery section. By them, the salesmen had  begun to doubt his intentions and drew the attention  of the manager. The manager asked him what exactly  he wanted and he replied that he wanted courteous  treatment. He explained that he had come to the  same shop in casual dress that morning and drawn  little attention. His pride was hurt and he wanted to  assert himself. He had come in good dress only to get  decent treatment, not for getting any textiles. He left  without making any purchase."
      }
    },
    {
      "index" : 44,
      "question" : "The salesmen in the shop are described as people who pay attention to",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8NDQ=",
      "description" : "",
      "correctOption" : "Mw==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " only young men and women ",
        "option2" : " pretty women ",
        "option3" : " only rich customers ",
        "option4" : " regular customers  Passage - 23 The Sun, while going on his daily rounds saw a  princess and fell in love with her. Whenever he could  slip away from the heavens he would take human  form and go down to the princess to spend some time  with her. The princess too became quite fond of him  and would wait for him to come. One day the Sun  decided to send her a blood-red ruby as a token of  his love for her. He put the gem in a silk beg, and  calling a crow that was fl ying past, asked the bird  to deliver the gem to his beloved. Crows had milky  white feathers in those days and it was considered  auspicious if a crow came anywhere near you. So the  Sun was pleased that he had found a crow to deliver  the gem. As the crow sped through the sky with the  silken bag, the aroma of food lured him. Looking  down, the crow saw that a wedding feast was in  progress, and immediately it was distracted from its  mission. Food was one thing it could never resist. 10  CO RE "
      }
    },
    {
      "index" : 45,
      "question" : "What did the Sun send for the princess as atoken of his love?",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8NDU=",
      "description" : "",
      "correctOption" : "Mw==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " He sent her the crow",
        "option2" : " He sent her dry cow dung",
        "option3" : " He sent her a red ruby",
        "option4" : " He gifted her the city of Myamar Direction (Q.46-50): Read the following two  passages and answer the questions that follow. Passage-24 The next morning grandmother was the fi rst one in  the car, ready to go. She had her big black valise that  looked like the head of a hippopotamus in one corner,  and underneath it she was masking a basket with  Pitty Sing, the cat, in it. She didn't intend for the cat  to be left alone in the house of three days because he  would miss her too much and she was afraid he might  brush against one of her gas burners and accidentally  asphyxiate himself. Her son, Bailey, didn't like to  arrive at a motel with a cat. She sat in the middle  of the back seat with John Wesley and June Star on  either side of her. Bailey and the children's mother  and the baby sat in front and they left Atlanta at "
      }
    },
    {
      "index" : 48,
      "question" : "The family reached the outskirts of Atlanta",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8NDg=",
      "description" : "IEV4cGxhbmF0aW9uOiBUaGUgZmFtaWx5IHN0YXJ0ZWQgZnJvbSBBdGxhbnRhIGF0IGVpZ2h0IGZvcnR5LSBmaSB2ZS4gVGhleSByZWFjaGVkIHRoZSBvdXRza2lydHMgJ2EgZ29vZCB0d2VudHkgIG1pbnV0ZXMgbGF0ZXInLiBUaGlzIG1lYW5zIHRoZXkgcmVhY2hlZCB0aGUgIG91dHNraXJ0cyBhZnRlciBuaW5lIGZpIHZlIGFuZCBub3QgZXhhY3RseSAnYXQgIG5pbmUnLiBUaGUgJ2dvb2QnIGluZGljYXRlcyB0aGF0IHRoZSBkcml2ZSB0b29rICAnYXQgbGVhc3QnIHR3ZW50eSBtaW51dGVzLg==",
      "correctOption" : "Mw==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " after eight forty-fi ve.",
        "option2" : " at nine-fi ve.",
        "option3" : " After nine-fi ve.",
        "option4" : " Past eight forty-fi ve."
      }
    },
    {
      "index" : 50,
      "question" : "The cat, Pitty Sing, sat",
      "questionId" : "fFBhcGVyIC0gSXxDU0FUfENTQVR8NTA=",
      "description" : "IEV4cGxhbmF0aW9uOiBUaGUgY2F0IHNhdCBpbiBncmFuZG1vdGhlcidzIGJhc2tldC4gUmVmZXIgIGxpbmUgdGhyZWUgb2YgdGhlIHBhc3NhZ2UuIA==",
      "correctOption" : "NA==",
      "topicId" : "fFBhcGVyIC0gSXxDU0FUfENTQVQ=",
      "year" : 2024,
      "paper" : "Paper - I",
      "topic" : "CSAT",
      "questionType" : "normal",
      "subject" : "CSAT",
      "questionOptions" : {
        "option1" : " In grandmother's valise.",
        "option2" : " Between John Wesley and june Star.",
        "option3" : " On grandmother's lap.",
        "option4" : " In grandmother's basket "
      }
    }
  ],
  "subject" : "CSAT",
  "topic" : "CSAT",
  "year" : "2024"
}
